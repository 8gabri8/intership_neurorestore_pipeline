---
title: "Count_test"
format: html
editor: visual
---

# Synapses Count Analysis

As shown, the data is overdispersed (Mean != Var) and follows a Negative Binomial (NB) distribution.

This scripts perform differential expression analysis on the synapses count relative to our study.
The method used is EdgeR and the statistical test is LRT.

It can be run in 2 differtn ways:
- Manually: where most of the steps performed by edgeR are visible, so more paramter tuning is possible.
- Automatically: based on differential_activity.R script (from nrutils library) set to use edgeR with LRT.


# Libraries

```{r}
```

```{r}
library(magrittr)
library(tidyr)
library(dplyr)
library(tibble)
```

# Load data

```{r}
df_all = read.csv("/run/user/1000/gvfs/smb-share:server=upcourtinenas,share=cervical/CERVICAL_ID/Connectome_analysis/Final_dataset/Results/all_brains.csv")
df_meta_all = read.csv("/run/user/1000/gvfs/smb-share:server=upcourtinenas,share=cervical/CERVICAL_ID/Connectome_analysis/Final_dataset/Results/all_brains_meta.csv")
```

# Select the data relative to only one test

```{r}
# test to perform
timepoints_to_test = c("Uninjured", "8 weeks")
region_injection_to_test = "DR"

# Select only relative data
df = df_all[(df_all$TimePoint %in% timepoints_to_test) & 
            (df_all$`Region.Injection` == region_injection_to_test),]

# Select ID of mice to use
ids = df$Brain.ID

# Create meta df
df_meta = df_meta_all[(df_meta_all$TimePoint %in% timepoints_to_test) & 
            (df_meta_all$`Region.Injection` == region_injection_to_test),]
df_meta$TimePoint = as.factor(df_meta$TimePoint)

# Pivot data
df <- pivot_wider(df, 
                  id_cols = ROI, 
                  names_from = c(`Brain.ID`, `Region.Injection`, TimePoint), 
                  values_from = `Synapses`)

# create counts
counts <- as.matrix(df[,-1])  # Assuming the first column is ROI and should be excluded
rownames(counts) <- df$ROI   # Set gene names as rownames
colnames(counts) <- df_meta$Brain.ID # Check column names to ensure they match metadata

print(counts[1:10,])
print(groups)

# extarct condtions
conditions = factor(df_meta$TimePoint)

# create design Matrix
design_matrix = model.matrix(~conditions)
print(design_matrix)


# create design Matrix
#df_meta$TimePoint <- relevel(df_meta$TimePoint, ref = "Uninjured") # Set "Uninjured as the reference level
#design = model.matrix(~ TimePoint, data = df_meta)
#colnames(design) <- gsub("^TimePoint", "", colnames(design))# Rename the columns to remove "TimePoint" prefix

```



## Manual Edge R: LRT

-   edgeR is a software package used for the analysis of differential gene expression in RNA-Seq and other count-based data.
-   edgeR uses the negative binomial distribution to model the count data. This distribution accounts for overdispersion
-   The package applies multiple testing correction methods to control the FDR, ensuring that the results are statistically significant.
-   DGEList object in the edgeR package is a fundamental data structure used to store and manage count data

**LRT** Purpose: The LRT compares the goodness-of-fit of two models: a full model (including the effect of interest) and a reduced model (excluding the effect of interest). Statistical Basis: It evaluates whether adding the effect of interest (e.g., a treatment effect) significantly improves the model's fit compared to a simpler model. *When to Use* Assumptions: The LRT is used when the data fit the model well and the assumptions of the model (such as the negative binomial distribution) are reasonably met. Application: Commonly used when you have a straightforward design and want to test the significance of a specific effect, such as whether a gene's expression changes between two conditions.

```{r}
# Create DGEList onject tot store the data
dgelist = edgeR::DGEList(counts = counts, group = conditions) 
print(dgelist)

# Normalize data
#dgelist <- edgeR::calcNormFactors(dgelist) #append nrom_factor on the strucutre

# Estimate dispersion (gene wise) for Negative Binomial
dgelist = edgeR::estimateDisp(dgelist, design_matrix)
  #Append in dgelist: common, tended and tag diospersion

# Fit glm (with dispersion and NB)
fit = edgeR::glmFit(dgelist, design = design_matrix)

print(fit$coefficients[1:10,])

# Perform LRT test
test = edgeR::glmLRT(fit)

print(test$table)
  #logFC	--> log2-fold change of expression between conditions being tested.
  #logCPM	--> average log2-counts per million, the average taken over all libraries in y.
  #LR	--> likelihood ratio statistics.
  #PValue	--> p-values.

# Print most differtially epxressed 
res = topTags(test, n = Inf, adjust.method = "bonferroni", sort.by = "logFC", p.value = 0.05) %>% #sort all (n=inf), based on Pvalue. adkust usin Benjamini
      as.data.frame() %>% # Transform to df
      tibble::rownames_to_column('ROI') #Moves the row names of the data frame into a new column named 'region'

print(res)

```

## Automatic EdgeR: LRT
```{r}
# Attention the name of the conditipon columns shoudl be "labels"
df_meta_changed = df_meta
df_meta_changed = df_meta_changed %>% rename(label = TimePoint)

df_meta_changed$label <- relevel(df_meta_changed$label, ref = "Uninjured") # Set "Uninjured as the reference level


da = differential_activity(input = counts, 
                           meta = df_meta_changed, 
                           replicate_col = 'replicate',
                           label_col = 'label',
                           min_features = 0,
                           de_family = 'pseudobulk',
                           de_method = 'edgeR',
                           de_type = 'LRT')

print(da)
```













# Differential_activity.R Function
```{r}
library(forcats)


#' Run differential activation (based on bulk RNA-seq analysis)
#' 
#' Run differential activation (based on bulk RNA-seq analysis)
#' 
#' @param input a count matrix to be analyzed, with features (regions) in rows
#'   and brains in columns. 
#' @param meta the accompanying meta data whereby the rownames match the column
#'   names of \code{input}.
#' @param replicate_col the vector in \code{meta} containing the replicate 
#'   information. Defaults to \code{replicate}.
#' @param label_col the vector in \code{meta} containing the experimental
#'   label. Defaults to \code{label}. 
#' @param min_features the minimum number of expressing brains
#'   for a region to retain it. Defaults to \code{0}.
#' @param de_method the specific differential expression testing method to use.
#'   Defaults to edgeR.
#' @param de_type the specific parameter of the differential expression testing
#'   method. Defaults to LRT for edgeR, LRT for DESeq2, and trend for limma.
#' @return a data frame containing differential expression results.
#'  
#' @importFrom magrittr %<>%
#' @importFrom tibble rownames_to_column
#' @importFrom dplyr %>% mutate n_distinct
#' @importFrom edgeR DGEList calcNormFactors estimateDisp glmQLFit glmQLFTest
#'   glmFit glmLRT topTags cpm
#' @importFrom DESeq2 DESeqDataSetFromMatrix DESeq results
#' @importFrom limma voom lmFit eBayes topTable
#' @importFrom purrr map 
#' @importFrom stats model.matrix
#' @importFrom methods new
#' 
#' @export
differential_activity = function(input, 
                         meta = NULL, 
                         replicate_col = 'replicate',
                         label_col = 'label',
                         min_features = 0,
                         de_family = 'pseudobulk',
                         de_method = 'edgeR',
                         de_type = 'LRT') {
  # check args
  if (de_method == 'limma') {
    if (de_type != 'voom') {
      # change default type to use
      de_type = 'trend'  
    }
  }
  
  # define a targets df
  targets = meta

  ## optionally, carry over factor levels from entire dataset
  if (is.factor(meta$label)) {
    targets$label %<>% factor(levels = levels(meta$label))
  }
  if (n_distinct(targets$label) > 2)
    return(NULL)
  # create design
  #design = model.matrix(~ label_col, data = targets)
  design = model.matrix(~ label, data = targets)
  
  # Check desing matrix
  print(design)
  
  DA = switch(de_method,
              edgeR = {
                tryCatch({
                  y = DGEList(counts = input, group = targets$label) %>%
                    calcNormFactors(method = 'TMM') %>%
                    estimateDisp(design)
                  test = switch(de_type,
                                QLF = {
                                  fit = glmQLFit(y, design)
                                  test = glmQLFTest(fit, coef = -1)
                                },
                                LRT = {
                                  fit = glmFit(y, design = design)
                                  test = glmLRT(fit)
                                })
                  res = topTags(test, n = Inf) %>%
                    as.data.frame() %>%
                    rownames_to_column('region') %>%
                    # flag metrics in results
                    mutate(de_family = 'pseudobulk',
                           de_method = de_method,
                           de_type = de_type)
                }, error = function(e) {
                  message(e)
                  data.frame()
                })
              },
              DESeq2 = {
                tryCatch({
                  dds = DESeqDataSetFromMatrix(countData = input,
                                               colData = targets,
                                               design = ~ label)
                  dds = switch(de_type,
                               Wald = {
                                 dds = try(DESeq(dds,
                                                 test = 'Wald',
                                                 fitType = 'parametric',
                                                 sfType = 'poscounts',
                                                 betaPrior = F))
                               },
                               LRT = {
                                 dds = try(DESeq(dds,
                                                 test = 'LRT',
                                                 reduced = ~ 1,
                                                 fitType = 'parametric',
                                                 sfType = 'poscounts',
                                                 betaPrior = F))
                               }
                  )
                  res = results(dds)
                  # write
                  res = as.data.frame(res) %>%
                    mutate(region = rownames(input)) %>%
                    # flag metrics in results
                    mutate(de_family = 'pseudobulk',
                           de_method = de_method,
                           de_type = de_type)
                }, error = function(e) {
                  message(e)
                  data.frame()
                })
              },
              limma = {
                tryCatch({
                  x = switch(de_type,
                             trend = {
                               trend_bool = T
                               dge = DGEList(as.matrix(input), group = targets$label)
                               dge = calcNormFactors(dge)
                               x = new("EList")
                               x$E = cpm(dge, log = TRUE, prior.count = 3)
                               x
                             },
                             voom = {
                               counts = all(as.matrix(input) %% 1 == 0)
                               if (counts) {
                                 trend_bool = F
                                 x = voom(as.matrix(input), design)
                                 x
                               }
                             })
                  # get fit
                  fit = lmFit(x, design) %>%
                    eBayes(trend = trend_bool, robust = trend_bool)
                  # format the results
                  res = fit %>%
                    # extract all coefs except intercept
                    topTable(number = Inf, coef = -1) %>%
                    rownames_to_column('region') %>%
                    # flag metrics in results
                    mutate(
                      de_family = 'pseudobulk',
                      de_method = de_method,
                      de_type = de_type)
                }, error = function(e) {
                  message(e)
                  data.frame()
                })
              }
  )
  
  # clean up the output
  suppressWarnings(
    colnames(DA) %<>%
      fct_recode('p_val' = 'p.value',  ## DESeq2
                 'p_val' = 'pvalue',  ## DESeq2
                 'p_val' = 'p.value',  ## t/wilcox
                 'p_val' = 'P.Value',  ## limma
                 'p_val' = 'PValue'  , ## edgeR
                 'p_val_adj' = 'padj', ## DESeq2/t/wilcox
                 'p_val_adj' = 'adj.P.Val',      ## limma
                 'p_val_adj' = 'FDR',            ## edgeER
                 'avg_logFC' = 'log2FoldChange', ## DESEeq2
                 'avg_logFC' = 'logFC' ## limma/edgeR
      )
  ) %>%
    as.character()
  
  DA %<>%
    # calculate adjusted p values
    mutate(p_val_adj = p.adjust(p_val, method = 'BH')) %>%
    # make sure region is a character not a factor
    mutate(region = as.character(region)) %>%
    dplyr::select(region,
                  avg_logFC,
                  p_val,
                  p_val_adj,
                  de_family,
                  de_method,
                  de_type
    ) %>%
    ungroup() %>%
    arrange(p_val_adj)
  
}
```




