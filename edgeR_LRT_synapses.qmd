---
title: "Count_test"
format: html
editor: visual
---

# Libraries

```{r}
```

```{r}
library(magrittr)
library(tidyr)
library(dplyr)
library(tibble)
```

# Load data

```{r}
df_all = read.csv("/run/user/1000/gvfs/smb-share:server=upcourtinenas,share=cervical/CERVICAL_ID/Connectome_analysis/Final_dataset/Results/all_brains.csv")
df_meta_all = read.csv("/run/user/1000/gvfs/smb-share:server=upcourtinenas,share=cervical/CERVICAL_ID/Connectome_analysis/Final_dataset/Results/all_brains_meta.csv")
```

# Select the data relative to only one test

```{r}
# test to perform
timepoints_to_test = c("Uninjured", "8 weeks")
region_injection_to_test = "DR"

# Select only relative data
df = df_all[(df_all$TimePoint %in% timepoints_to_test) & 
            (df_all$`Region.Injection` == region_injection_to_test),]

# Select ID of mice to use
ids = df$Brain.ID

# Create meta df
df_meta = df_meta_all[(df_meta_all$TimePoint %in% timepoints_to_test) & 
            (df_meta_all$`Region.Injection` == region_injection_to_test),]
df_meta$TimePoint = as.factor(df_meta$TimePoint)

# Pivot data
df <- pivot_wider(df, 
                  id_cols = ROI, 
                  names_from = c(`Brain.ID`, `Region.Injection`, TimePoint), 
                  values_from = `Synapses`)

# create counts
counts <- as.matrix(df[,-1])  # Assuming the first column is ROI and should be excluded
rownames(counts) <- df$ROI   # Set gene names as rownames
colnames(counts) <- df_meta$Brain.ID # Check column names to ensure they match metadata

print(counts[1:10,])
print(groups)

# extarct condtions
conditions = factor(df_meta$TimePoint)

# create design Matrix
design_matrix = model.matrix(~conditions)
print(design_matrix)


# create design Matrix
#df_meta$TimePoint <- relevel(df_meta$TimePoint, ref = "Uninjured") # Set "Uninjured as the reference level
#design = model.matrix(~ TimePoint, data = df_meta)
#colnames(design) <- gsub("^TimePoint", "", colnames(design))# Rename the columns to remove "TimePoint" prefix

```

# Synapses Count Analysis

As shown, the data is overdispersed (Mean != Var) and follows a Negative Binomial (NB) distribution.

# Tests

## Edge R: LRT and QLT

-   edgeR is a software package used for the analysis of differential gene expression in RNA-Seq and other count-based data.
-   edgeR uses the negative binomial distribution to model the count data. This distribution accounts for overdispersion
-   The package applies multiple testing correction methods to control the FDR, ensuring that the results are statistically significant.
-   DGEList object in the edgeR package is a fundamental data structure used to store and manage count data

### LRT

**LRT** Purpose: The LRT compares the goodness-of-fit of two models: a full model (including the effect of interest) and a reduced model (excluding the effect of interest). Statistical Basis: It evaluates whether adding the effect of interest (e.g., a treatment effect) significantly improves the model's fit compared to a simpler model. *When to Use* Assumptions: The LRT is used when the data fit the model well and the assumptions of the model (such as the negative binomial distribution) are reasonably met. Application: Commonly used when you have a straightforward design and want to test the significance of a specific effect, such as whether a gene's expression changes between two conditions.

```{r}
# Create DGEList onject tot store the data
dgelist = edgeR::DGEList(counts = counts, group = conditions) 
print(dgelist)

# Normalize data
#dgelist <- edgeR::calcNormFactors(dgelist) #append nrom_factor on the strucutre

# Estimate dispersion (gene wise) for Negative Binomial
dgelist = edgeR::estimateDisp(dgelist, design_matrix)
  #Append in dgelist: common, tended and tag diospersion

# Fit glm (with dispersion and NB)
fit = edgeR::glmFit(dgelist, design = design_matrix)

print(fit$coefficients[1:10,])

# Perform LRT test
test = edgeR::glmLRT(fit)

print(test$table)
  #logFC	--> log2-fold change of expression between conditions being tested.
  #logCPM	--> average log2-counts per million, the average taken over all libraries in y.
  #LR	--> likelihood ratio statistics.
  #PValue	--> p-values.

# Print most differtially epxressed 
res = topTags(test, n = Inf, adjust.method = "bonferroni", sort.by = "logFC", p.value = 0.05) %>% #sort all (n=inf), based on Pvalue. adkust usin Benjamini
      as.data.frame() %>% # Transform to df
      tibble::rownames_to_column('ROI') #Moves the row names of the data frame into a new column named 'region'

print(res)

```

